import time
from play_genetic import ConnectFour as GeneticConnectFour
from play_simple import ConnectFour as SimpleConnectFour

#This code of the model of the Connect Four game was generated by OpenAI chatgpt

class ConnectFourExtended(GeneticConnectFour):
    def __init__(self):
        super().__init__()
    
    def print_board(self):
        for row in self.board:
            print('| ' + ' | '.join(row) + ' |')
        print('-' * (self.columns * 4 + 1))
        print('| ' + ' | '.join(str(i) for i in range(self.columns)) + ' |')

    def is_valid_move(self, column):
        return 0 <= column < self.columns and self.board[0][column] == ' '

    def make_move(self, column):
        if not self.is_valid_move(column):
            print("Invalid move. Please choose another column.")
            return False
        row = self.rows - 1
        while row >= 0:
            if self.board[row][column] == ' ':
                self.board[row][column] = self.current_player
                return True
            row -= 1
    
    def check_winner(self):
        for row in range(self.rows):
            for col in range(self.columns - 3):
                if (self.board[row][col] == self.board[row][col+1] == self.board[row][col+2] == self.board[row][col+3]) and \
                        (self.board[row][col] != ' '):
                    return True

        for col in range(self.columns):
            for row in range(self.rows - 3):
                if (self.board[row][col] == self.board[row+1][col] == self.board[row+2][col] == self.board[row+3][col]) and \
                        (self.board[row][col] != ' '):
                    return True

        for row in range(self.rows - 3):
            for col in range(self.columns - 3):
                if (self.board[row][col] == self.board[row+1][col+1] == self.board[row+2][col+2] == self.board[row+3][col+3]) and \
                        (self.board[row][col] != ' '):
                    return True

                if (self.board[row][col+3] == self.board[row+1][col+2] == self.board[row+2][col+1] == self.board[row+3][col]) and \
                        (self.board[row][col+3] != ' '):
                    return True
        return False

    def switch_player(self):
        self.current_player = 'O' if self.current_player == 'X' else 'X'

    #implement play_game_genetic and play_game_simple, 
    # should return True for win and False for lost
    # Should call each game in the loop for play
    # make sure main calls play, while play calls each play_game_

    def play_game_genetic(self):
        # Use the genetic algorithm's methods to make the best move
        best_move, _, _ = self.grid_search()
        self.make_move(best_move)
        self.print_board()
    
    def play_game_simple(self):
        # Create an instance of the simple heuristic-based ConnectFour game
        simple_game = SimpleConnectFour()

        print("Playing game using simple heuristic-based approach:")
        simple_game.print_board()
        while True:
            column = simple_game.select_simple_move()
            if simple_game.make_move(column):
                simple_game.print_board()
                if simple_game.check_winner():
                    print("Player", simple_game.current_player, "wins!")
                    return True
                if all(simple_game.board[i][j] != ' ' for i in range(simple_game.rows) for j in range(simple_game.columns)):
                    print("It's a draw!")
                    return False
                simple_game.switch_player()
    

    def play(self, num_games=None):
        if num_games is None:
            # Play a single game
            print("Welcome to Connect Four!")
            self.print_board()
            while True:
                column = int(input(f"Player {self.current_player}, choose a column (0-{self.columns-1}): "))
                if self.make_move(column):
                    self.print_board()
                    if self.check_winner():
                        print(f"Player {self.current_player} wins!")
                        break
                    if all(self.board[i][j] != ' ' for i in range(self.rows) for j in range(self.columns)):
                        print("It's a draw!")
                        break
                    self.switch_player()
        else:
            # Compare multiple games
            wins_genetic_algorithm = 0
            wins_heuristic = 0
            total_duration_genetic_algorithm = 0
            total_duration_heuristic = 0

            for _ in range(num_games):
                start_time = time.time()
                # Play a game using the genetic algorithm-based strategy
                game_result = self.play_game_genetic()
                if game_result:
                    wins_genetic_algorithm += 1
                end_time = time.time()
                duration_genetic_algorithm = end_time - start_time
                total_duration_genetic_algorithm += duration_genetic_algorithm

                start_time = time.time()
                # Play a game using the simple heuristic-based approach
                game_result = self.play_game_simple()
                if game_result:
                    wins_heuristic += 1
                end_time = time.time()
                duration_heuristic = end_time - start_time
                total_duration_heuristic += duration_heuristic

            # Calculate win rates and average game durations
            win_rate_genetic_algorithm = wins_genetic_algorithm / num_games
            win_rate_heuristic = wins_heuristic / num_games
            average_duration_genetic_algorithm = total_duration_genetic_algorithm / num_games
            average_duration_heuristic = total_duration_heuristic / num_games

            # Print or log the results
            print("Win rate for genetic algorithm-based strategy:", win_rate_genetic_algorithm)
            print("Win rate for simple heuristic-based approach:", win_rate_heuristic)
            print("Average game duration for genetic algorithm-based strategy:", average_duration_genetic_algorithm)
            print("Average game duration for simple heuristic-based approach:", average_duration_heuristic)


if __name__ == "__main__":
    game = ConnectFourExtended()
    num_games = int(input("Enter the number of games to compare (press Enter for a single game): ").strip() or "1")
    game.play(num_games)